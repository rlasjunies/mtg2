{"version":3,"sources":["paints/paintsData.ts"],"names":[],"mappings":"AAAA,yCAAyC;AACzC,wCAAwC;AACxC,oDAAoD;AACpD,GAAG;AACH,kCAAkC;AAClC,gDAAgD;AAChD,0EAA0E;AAC1E,UAAU;AACV,IAAI;AACJ,GAAG;AACH,sBAAsB;AACtB,0DAA0D;AAC1D,2DAA2D;AAC3D,0DAA0D;AAC1D,KAAK;AACL,IAAI;AACJ,+BAA+B;AAC/B,GAAG;AACH,2DAA2D;AAC3D,qCAAqC;AACrC,GAAG;AACH,2DAA2D;AAC3D,uDAAuD;AACvD,kBAAkB;AAClB,YAAY;AACZ,UAAU;AACV,IAAI","file":"paints/paintsData.js","sourcesContent":["// import mongoose = require(\"mongoose\");\r\n// import Promise = require(\"bluebird\");\r\n// import $paintModel = require(\"../models/paints\");\r\n// \r\n// export function resetPaints() {\r\n//     return new Promise((resolve, reject) => {\r\n//         mongoose.connection.collection(\"paints\").drop(resolve, reject);\r\n//     });\r\n// }\r\n// \r\n// var paintsArray = [\r\n//     { title: \"2012121\", description: \"description 1\" },\r\n//     { title: \"20141212\", description: \"description 2\" },\r\n//     { title: \"no title\", description: \"description 3\" }\r\n// ];\r\n//  \r\n// export function populate() {\r\n// \r\n//     return $paintModel.findPaints({}).then((paints) => {\r\n//         if (paints.length === 0) {\r\n// \r\n//             return Promise.map(paintsArray, (paint) => {\r\n//                 return $paintModel.createJob(paint);\r\n//             });\r\n//         }\r\n//     });\r\n// }\r\n"],"sourceRoot":"/source/"}