<<<<<<< HEAD
{"version":3,"sources":["authentication/emailVerification.ts"],"names":["send","verify","handleError","getHtml"],"mappings":"AAEA,OAAO,KAAK,CAAC,MAAM,YAAY,CAAC;AAChC,OAAO,KAAK,GAAG,MAAM,YAAY,CAAC;AAClC,OAAO,KAAK,EAAE,MAAO,IAAI,CAAC;AAC1B,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AAGzC,OAAO,KAAK,aAAa,MAAM,0BAA0B,CAAC;AAC1D,OAAO,KAAK,OAAO,MAAM,oBAAoB,CAAC;AAC9C,OAAO,KAAK,KAAK,MAAM,gBAAgB,CAAC;AACxC,OAAO,KAAK,CAAC,MAAM,iBAAiB,CAAC;AAerC,qBAAqB,KAAY,EAAE,GAAc;IAC7CA,IAAIA,OAAOA,GAAcA;QACrBA,GAAGA,EAAEA,KAAKA;KACbA,CAACA;IAEFA,IAAIA,KAAKA,GAAGA,GAAGA,CAACA,MAAMA,CAACA,OAAOA,EAAEA,aAAaA,CAACA,YAAYA,CAACA,CAACA;IAE5DA,+DAA+DA;IAE/DA,IAAIA,qBAAqBA,GAA0CA;QAC/DA,OAAOA,EAAEA,OAAOA;QAChBA,IAAIA,EAAEA;YACFA,IAAIA,EAAEA,sBAAsBA;YAC5BA,IAAIA,EAAEA,aAAaA,CAACA,SAASA;SAChCA;KACJA,CAACA;IAEFA,IAAIA,WAAWA,GAAGA,UAAUA,CAACA,eAAeA,CAACA,qBAAqBA,CAACA,CAACA;IAEpEA,IAAIA,WAAWA,GAA+BA;QAC1CA,IAAIA,EAAEA,yCAAyCA;QAC/CA,EAAEA,EAAEA,KAAKA;QACTA,OAAOA,EAAEA,6BAA6BA;QACtCA,IAAIA,EAAEA,OAAOA,CAACA,KAAKA,CAACA;KACvBA,CAACA;IAEFA,WAAWA,CAACA,QAAQA,CAACA,WAAWA,EAAEA,CAACA,GAASA;QACxCA,EAAEA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;YACNA,CAACA,CAACA,GAAGA,CAACA,KAAKA,CAACA,yCAAyCA,WAAWA,CAACA,EAAEA,EAAEA,CAACA,CAACA;QAG3EA,CAACA;QAAAA,IAAIA,CAAAA,CAACA;YACFA,CAACA,CAACA,GAAGA,CAACA,IAAIA,CAACA,6BAA6BA,GAAGA,WAAWA,CAACA,EAAEA,CAACA,CAACA;QAC/DA,CAACA;IACLA,CAACA,CAACA,CAACA;AACPA,CAACA;AAED,uBAAuB,GAAmC,EAAE,GAAc,EAAE,IAAa;IACrFC,IAAIA,KAAKA,GAAGA,GAAGA,CAACA,KAAKA,CAACA,KAAKA,CAACA;IAE5BA,IAAIA,OAAOA,GAAcA,GAAGA,CAACA,MAAMA,CAACA,KAAKA,EAAEA,aAAaA,CAACA,YAAYA,CAACA,CAACA;IAEvEA,IAAIA,KAAKA,GAAGA,OAAOA,CAACA,GAAGA,CAACA;IAExBA,EAAEA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA;QACTA,MAAMA,CAACA,WAAWA,CAACA,GAAGA,CAACA,CAACA;IAC5BA,CAACA;IAEDA,IAAIA,KAAKA,GAAGA,KAAKA,CAACA,SAASA,EAAEA,CAACA;IAC9BA,KAAKA,CAACA,OAAOA,CAACA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,EAAEA,CAACA,GAAOA,EAAEA,SAA8BA;QACpEA,EAAEA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;YACNA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA;QAC3BA,CAACA;QAEDA,EAAEA,CAACA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA;YACbA,MAAMA,CAACA,WAAWA,CAACA,GAAGA,CAACA,CAACA;QAC5BA,CAACA;QAEDA,EAAEA,CAACA,CAACA,CAACA,SAASA,CAACA,MAAMA,CAACA,CAACA,CAACA;YACpBA,SAASA,CAACA,MAAMA,GAAGA,IAAIA,CAACA;QAC5BA,CAACA;QAEDA,SAASA,CAACA,IAAIA,CAACA,CAACA,GAAOA,EAAEA,SAA8BA;YACnDA,EAAEA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;gBACNA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA;YAC3BA,CAACA;YAEDA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAASA,OAAOA,CAACA,MAAMA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA,CAACA;QAC7DA,CAACA,CAACA,CAACA;IAEPA,CAACA,CAACA,CAACA;AAEPA,CAACA;AAED,qBAAqB,GAAc;IAC/BC,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA;QACxBA,OAAOA,EAACA,mDAAmDA;KAC9DA,CAACA,CAACA;AACPA,CAACA;AAED,iBAAiB,KAAa;IAE1BC,IAAIA,KAAKA,GAAWA;QAChBA,uBAAuBA;QACvBA,SAASA,EAAEA,+CAA+CA,GAAGA,KAAKA;QAClEA,KAAKA,EAAEA,OAAOA;QACdA,QAAQA,EAAEA,wBAAwBA;QAClCA,IAAIA,EAAEA,iEAAiEA;KAC1EA,CAACA;IAEFA,qCAAqCA;IACrCA,IAAIA,IAAIA,GAAGA,EAAEA,CAACA,YAAYA,CAACA,CAACA,CAACA,MAAMA,CAACA,yBAAyBA,EAAEA,EAAEA,QAAQA,EAAEA,MAAMA,EAAEA,CAACA,CAACA;IAErFA,IAAIA,QAAQA,GAAGA,CAACA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA;IAEhCA,IAAIA,OAAOA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,CAACA;IAE9BA,MAAMA,CAACA,OAAOA,CAACA;AACnBA,CAACA;AAED,CAAC,CAAC,gBAAgB,GAAG;IACjB,WAAW,EAAE,gBAAgB;CAChC,CAAC","file":"authentication/emailVerification.js","sourcesContent":["///< reference path=\"../typings/tsd.d.ts\"/>\r\nimport * as e from \"express\";\r\nimport * as _ from \"underscore\";\r\nimport * as jwt from \"jwt-simple\";\r\nimport * as fs from  \"fs\";\r\nimport * as nodemailer from \"nodemailer\";\r\nimport * as nodemailer_smtp_transport from \"nodemailer-smtp-transport\";\r\n\r\nimport * as $ConfigSecret from \"../services/configSecret\";\r\nimport * as $Config from \"../services/config\";\r\nimport * as xUser from \"../shared/user\";\r\nimport * as $ from \"../services/mtg\";\r\n\r\n// import smtpTransport = require(\"nodemailer-smtp-transport\");\r\n\r\ninterface IModel {\r\n    verifyUrl: string;\r\n    title: string;\r\n    subTitle: string;\r\n    body: string;\r\n}\r\n\r\ninterface IPayload {\r\n    sub:string\r\n}\r\n\r\nexport function send(email:string, res:e.Response) {\r\n    var payload : IPayload = {\r\n        sub: email\r\n    };\r\n\r\n    var token = jwt.encode(payload, $ConfigSecret.EMAIL_SECRET);\r\n\r\n    //var nSMTPTransportOptions: NodemailerSMTPTransportOptions = {\r\n\r\n    let nSMTPTransportOptions: nodemailer_smtp_transport.SmtpOptions = {\r\n        service: \"Gmail\",\r\n        auth: {\r\n            user: \"rlasjunies@gmail.com\",\r\n            pass: $ConfigSecret.SMTP_PASS\r\n        }\r\n    };\r\n\r\n    var transporter = nodemailer.createTransport(nSMTPTransportOptions);\r\n\r\n    var mailOptions: nodemailer.SendMailOptions = {\r\n        from: \"Richard Lasjunies<rlasjunies@gmail.com>\",\r\n        to: email,\r\n        subject: \"PS Jwt Account verification\",\r\n        html: getHtml(token)\r\n    };\r\n\r\n    transporter.sendMail(mailOptions, (err:Error) => {\r\n        if (err) {\r\n            $.log.error(`Verification email - Error sending to:${mailOptions.to}`);\r\n            //return res.status(500).send(JSON.stringify(err));\r\n            //When here the res is already given\r\n        }else{\r\n            $.log.info(\"Verification email sent to:\" + mailOptions.to);\r\n        }\r\n    });\r\n}\r\n\r\nexport function verify(req: e.xRequest<e.IRouteParamEmpty>, res:e.Response, next:Function) {\r\n    var token = req.query.token;\r\n\r\n    var payload : IPayload = jwt.decode(token, $ConfigSecret.EMAIL_SECRET);\r\n\r\n    var email = payload.sub;\r\n\r\n    if (!email) {\r\n        return handleError(res);\r\n    }\r\n\r\n    var users = xUser.userModel();\r\n    users.findOne({ email: email }, (err:any, userFound: xUser.IUserDocument) => {\r\n        if (err) {\r\n            return res.status(500);\r\n        }\r\n\r\n        if (!userFound) {\r\n            return handleError(res);\r\n        }\r\n\r\n        if (!userFound.active) {\r\n            userFound.active = true;\r\n        }\r\n\r\n        userFound.save((err:any, userFound: xUser.IUserDocument): any => {\r\n            if (err) {\r\n                return res.status(500);\r\n            }\r\n\r\n            return res.redirect(<string>$Config.appUrl[process.env]);\r\n        });\r\n\r\n    });\r\n\r\n}\r\n\r\nfunction handleError(res:e.Response) {\r\n    return res.status(401).send({\r\n        message:\"Authentication failed, enable to verify the email\"\r\n    });\r\n}\r\n\r\nfunction getHtml(token: string) {\r\n\r\n    var model: IModel = {\r\n        // TODO to make generic\r\n        verifyUrl: \"http://localhost:3000/auth/verifyemail?token=\" + token,\r\n        title: \"psJwt\",\r\n        subTitle: \"Thanks for signing up!\",\r\n        body: \"Please, verify your email address by clicking the button below.\"\r\n    };\r\n\r\n    // TODO replace readFileSync by Async\r\n    var html = fs.readFileSync($.server.emailVerificationFileName, { encoding: \"utf8\" });\r\n\r\n    var template = _.template(html);\r\n\r\n    var sReturn = template(model);\r\n\r\n    return sReturn;\r\n}\r\n\r\n_.templateSettings = {\r\n    interpolate: /\\{\\{(.+?)\\}\\}/g\r\n};\r\n"],"sourceRoot":"/source/"}
=======
{"version":3,"sources":["authentication/emailVerification.ts"],"names":["send","verify","handleError","getHtml"],"mappings":"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","file":"authentication/emailVerification.js","sourcesContent":["///< reference path=\"../typings/tsd.d.ts\"/>\r\nimport e = require(\"express\");\r\nimport _ = require(\"underscore\");\r\nimport jwt = require(\"jwt-simple\");\r\nimport fs = require(\"fs\");\r\nimport nodemailer = require(\"nodemailer\");\r\nimport nodemailer_smtp_transport = require(\"nodemailer-smtp-transport\");\r\n\r\nimport $ConfigSecret = require(\"../services/configSecret\");\r\nimport $Config = require(\"../services/config\");\r\nimport xUser = require(\"../shared/user\");\r\nimport $ = require(\"../services/mtg\");\r\n\r\n// import smtpTransport = require(\"nodemailer-smtp-transport\");\r\n\r\ninterface IModel {\r\n    verifyUrl: string;\r\n    title: string;\r\n    subTitle: string;\r\n    body: string;\r\n}\r\n\r\ninterface IPayload {\r\n    sub:string\r\n}\r\n\r\nexport function send(email:string, res:e.Response) {\r\n    var payload : IPayload = {\r\n        sub: email\r\n    };\r\n\r\n    var token = jwt.encode(payload, $ConfigSecret.EMAIL_SECRET);\r\n    \r\n    //var nSMTPTransportOptions: NodemailerSMTPTransportOptions = {\r\n    \r\n    let nSMTPTransportOptions: nodemailer_smtp_transport.SmtpOptions = {\r\n        service: \"Gmail\",\r\n        auth: {\r\n            user: \"rlasjunies@gmail.com\",\r\n            pass: $ConfigSecret.SMTP_PASS\r\n        }\r\n    };\r\n\r\n    var transporter = nodemailer.createTransport(nSMTPTransportOptions);\r\n\r\n    var mailOptions: nodemailer.SendMailOptions = {\r\n        from: \"Richard Lasjunies<rlasjunies@gmail.com>\",\r\n        to: email,\r\n        subject: \"PS Jwt Account verification\",\r\n        html: getHtml(token)\r\n    };\r\n\r\n    transporter.sendMail(mailOptions, (err:Error) => {\r\n        if (err) {\r\n            $.log.error(`Verification email - Error sending to:${mailOptions.to}`);\r\n            //return res.status(500).send(JSON.stringify(err));\r\n            //When here the res is already given\r\n        }else{\r\n            $.log.info(\"Verification email sent to:\" + mailOptions.to);\r\n        }\r\n    });\r\n}\r\n\r\nexport function verify(req: e.xRequest<e.IRouteParamEmpty>, res:e.Response, next:Function) {\r\n    var token = req.query.token;\r\n\r\n    var payload : IPayload = jwt.decode(token, $ConfigSecret.EMAIL_SECRET);\r\n\r\n    var email = payload.sub;\r\n\r\n    if (!email) {\r\n        return handleError(res);\r\n    }\r\n\r\n    var users = xUser.userModel();\r\n    users.findOne({ email: email }, (err:any, userFound: xUser.IUserDocument) => {\r\n        if (err) {\r\n            return res.status(500);\r\n        }\r\n\r\n        if (!userFound) {\r\n            return handleError(res);\r\n        }\r\n\r\n        if (!userFound.active) {\r\n            userFound.active = true;\r\n        }\r\n\r\n        userFound.save((err:any, userFound: xUser.IUserDocument): any => {\r\n            if (err) {\r\n                return res.status(500);\r\n            }\r\n\r\n            return res.redirect(<string>$Config.appUrl[process.env]);\r\n        });\r\n\r\n    });\r\n\r\n}\r\n\r\nfunction handleError(res:e.Response) {\r\n    return res.status(401).send({\r\n        message:\"Authentication failed, enable to verify the email\"\r\n    });\r\n}\r\n\r\nfunction getHtml(token: string) {\r\n\r\n    var model: IModel = {\r\n        // TODO to make generic\r\n        verifyUrl: \"http://localhost:3000/auth/verifyemail?token=\" + token,\r\n        title: \"psJwt\",\r\n        subTitle: \"Thanks for signing up!\",\r\n        body: \"Please, verify your email address by clicking the button below.\"\r\n    };\r\n\r\n    // TODO replace readFileSync by Async\r\n    var html = fs.readFileSync($.server.emailVerificationFileName, { encoding: \"utf8\" });\r\n\r\n    var template = _.template(html);\r\n\r\n    var sReturn = template(model);\r\n\r\n    return sReturn;\r\n}\r\n\r\n_.templateSettings = {\r\n    interpolate: /\\{\\{(.+?)\\}\\}/g\r\n};\r\n"],"sourceRoot":"/source/"}
>>>>>>> origin/master
