{"version":3,"sources":["authentication/googleAuth.ts"],"names":["googleAuth"],"mappings":"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","file":"authentication/googleAuth.js","sourcesContent":["import express = require(\"express\");\r\n// import mongoose = require(\"mongoose\");\r\n\r\nimport ts = require(\"./google.typesafe\");\r\n\r\nimport libRequest = require(\"request\");\r\nimport libUser = require(\"../shared/user\");\r\nimport libToken = require(\"./token\");\r\nimport $ConfigSecret = require(\"../services/configSecret\");\r\n\r\ninterface IGoogleProfile {\r\n    sub: string; // GoogleID\r\n    name: string;\r\n    email: string;\r\n    picture: string;\r\n}\r\n\r\n// TODO how to define an interface more precise\r\n// We need to define IGoogleProfile as return of this requestGet\r\n\r\n// export interface request {//extends request.RequestAPI{\r\n//     \t//function post(options: Options, callback?: (error: any, response: any, body: any) => void): Request;\r\n// \t\tfunction get(options: request.Options, callback?: (error: any, response: any, body: IGoogleProfile) => void): Request;\r\n// }\r\n\r\nexport function googleAuth(expReq: express.Request, expRes: express.Response) {\r\n    var tsBody = <ts.IAuthGoogleBody>expReq.body;\r\n    //console.log(tsBody.code);\r\n\r\n    var opt: libRequest.Options = {\r\n        url: \"https://accounts.google.com/o/oauth2/token\",\r\n        json: true,\r\n        form: {\r\n            code: tsBody.code,\r\n            client_id: tsBody.clientId,\r\n            redirect_uri: tsBody.redirectUri,\r\n            grant_type: \"authorization_code\",\r\n            client_secret: $ConfigSecret.GOOGLE_SECRET\r\n        }\r\n    };\r\n\r\n    libRequest.post(opt, (err, response, token) => {\r\n        //console.log(\"\\ngoogleAuth - token: \" + JSON.stringify(token));\r\n        if (err) {\r\n            throw err;\r\n        }\r\n\r\n\r\n        var accessToken = token.access_token;\r\n        var headers: libRequest.Headers = {};\r\n        headers[\"Authorization\"] = \"Bearer \" + accessToken;\r\n\r\n        var requestParams: libRequest.Options = {};\r\n        requestParams.url = \"https://www.googleapis.com/plus/v1/people/me/openIdConnect\";\r\n        requestParams.headers = headers;\r\n        requestParams.json = true;\r\n        libRequest.get(requestParams, (err:any, response:any, profile: IGoogleProfile) => {\r\n            //console.log(\"\\ngoogleAuth:\" + err + response + JSON.stringify(profile));\r\n            if (err) {\r\n                throw err;\r\n            }\r\n\r\n            var userModel = libUser.userModel();\r\n\r\n            userModel.findOne({\r\n                email: profile.email\r\n            }, (err, foundUser) => {\r\n                    if (foundUser) {\r\n                        return libToken.createSendToken(foundUser, expRes);\r\n                    }\r\n\r\n                    var userModel = libUser.userModel();\r\n\r\n                    var userDoc: libUser.IUserDocument = new userModel({});\r\n\r\n                    userDoc.email = profile.email;\r\n                    userDoc.displayName = profile.name;\r\n                    userDoc.googleId = profile.sub;\r\n                    userDoc.picture = profile.picture;\r\n\r\n                    userDoc.save((err) => {\r\n                        // if (err) return next(err);\r\n                        if (err) {\r\n                            throw err;\r\n                        }\r\n                        libToken.createSendToken(userDoc, expRes);\r\n                    });\r\n                });\r\n        });\r\n    });\r\n\r\n    // res.status(200).send({ message: \"fine!\" });\r\n}\r\n"],"sourceRoot":"/source/"}