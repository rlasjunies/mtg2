{"version":3,"sources":["authorization/authorization.middleware.ts"],"names":["checksRole","checksAccessRight","loadAccessRightFromRoles"],"mappings":"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","file":"authorization/authorization.middleware.js","sourcesContent":["import e = require(\"express\");\r\nimport $ = require(\"../services/mtg\");\r\nimport fs = require(\"fs-extra\");\r\nimport $usersModel = require(\"../shared/user\");\r\n\r\nvar moduleName = \"authorizationService@\";\r\n\r\nexport function checksRole(roles:string[]) {\r\n    return function (req:e.Request, res:e.Response, next:Function) {\r\n        var allowed:boolean= false;\r\n        \r\n        for (var role of roles){\r\n            if ( req.user.allowedRoles.indexOf(role) !== -1){\r\n                allowed=true;\r\n            }\r\n        }\r\n        \r\n        if (!allowed) {\r\n             var msg = \"Not allowed; Missing role:\" + roles.concat(\",\");\r\n             $.log.info(msg);\r\n             res.status(403).send({ message: msg });\r\n        } else {\r\n             next(); \r\n        }\r\n    }\r\n}\r\n\r\nexport function checksAccessRight(accessRight:string) {\r\n    return function (req:e.Request, res:e.Response, next:Function) {\r\n        var allowed:boolean= false;\r\n\r\n        loadAccessRightFromRoles(req.user.allowedRoles,(accessRights:string[])=>{\r\n            //$.log.info(`found:${accessRight} in :[${JSON.stringify(accessRights)}]`)\r\n            $.log.info(\"accessRights:\" + JSON.stringify(accessRights));\r\n            $.log.info(`accessRights.indexOf(${accessRight}):`+accessRights.indexOf(accessRight));\r\n            if ( accessRights.indexOf(accessRight) !== -1){\r\n                allowed=true;\r\n            }\r\n\r\n            if (!allowed) {\r\n                 var msg = \"Not allowed; Missing accessRight:\" + accessRight;\r\n                 $.log.warn(msg);\r\n                 res.status(403).send({ message: msg });\r\n            } else {\r\n                 next(); \r\n            }                \r\n        });\r\n    }\r\n}\r\n\r\nfunction loadAccessRightFromRoles(userRoles:string[],callback:(accessRights:string[]) => void){   \r\n    fs.exists($.server.rolesFileName,(isFileExisting: boolean) => {\r\n        if (!isFileExisting) {\r\n            callback([]);\r\n        } else {\r\n            fs.readFile($.server.rolesFileName,\"utf8\", (err: Error, data:string) => {\r\n                if (err) {\r\n                    callback([]);\r\n                } else {\r\n                    let accessRights:string[] = [];\r\n                    let fileRoles : any[] = JSON.parse(data.slice(1)); //I've got an strange caracter at the beginning => slice it\r\n                    \r\n                    //concat all the accessright arrays\r\n                    for ( let userRole of userRoles){\r\n                        let fileRole: any;\r\n                        \r\n                        $.log.debug(`userrole:${userRole}`)                        \r\n                        for ( let tmpFileRole of fileRoles){\r\n                           if ( tmpFileRole.id == userRole){\r\n                               fileRole = tmpFileRole;\r\n                                //How to go out of a for loop?\r\n                           }\r\n                        }\r\n                        \r\n                        if (fileRole){\r\n                            accessRights = accessRights.concat(fileRole.accessrights);\r\n                        }else{\r\n                            $.log.error(`Unknown role:${userRole}`);                            \r\n                        }\r\n                    }\r\n                   $.log.info(`accessright: ${accessRights.toString()} \\n allowed for:${userRoles}`  );\r\n                   callback(accessRights);\r\n                }\r\n            });\r\n        }\r\n    });\r\n}"],"sourceRoot":"/source/"}